<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="EasySave" xml:space="preserve">
    <value>Welcome to EasySave !</value>
  </data>
  <data name="InvalidOption" xml:space="preserve">
    <value>Invalid option.</value>
  </data>
  <data name="InvalidIndex" xml:space="preserve">
    <value>Invalid index.</value>
  </data>
  <data name="PleaseChooseAction" xml:space="preserve">
    <value>Please choose an action to execute.</value>
  </data>
  <data name="CreateWork" xml:space="preserve">
    <value>Create a work</value>
  </data>
  <data name="ExecuteWork" xml:space="preserve">
    <value>Execute a work</value>
  </data>
  <data name="ExecuteWorks" xml:space="preserve">
    <value>Execute all works</value>
  </data>
  <data name="ModifyWork" xml:space="preserve">
    <value>Modify a work</value>
  </data>
  <data name="DeleteWork" xml:space="preserve">
    <value>Delete a work</value>
  </data>
  <data name="ChangeLanguage" xml:space="preserve">
    <value>Choose a language</value>
  </data>
  <data name="ToQuit" xml:space="preserve">
    <value>To quit, press : q</value>
  </data>
  <data name="Closing" xml:space="preserve">
    <value>App is closing..</value>
  </data>
  <data name="EnterName" xml:space="preserve">
    <value>Enter a name</value>
  </data>
  <data name="EnterSource" xml:space="preserve">
    <value>Enter a source folder</value>
  </data>
  <data name="EnterTarget" xml:space="preserve">
    <value>Enter a target folder</value>
  </data>
  <data name="Entertype" xml:space="preserve">
    <value>Enter a type (1. Complete, 2. Differential)</value>
  </data>
  <data name="Name" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="SourceFolder" xml:space="preserve">
    <value>Source folder</value>
  </data>
  <data name="TargetFolder" xml:space="preserve">
    <value>Target folder</value>
  </data>
  <data name="SaveType" xml:space="preserve">
    <value>Save type</value>
  </data>
  <data name="PleaseSelectWork" xml:space="preserve">
    <value>Please select a work</value>
  </data>
  <data name="NoWorkCreated" xml:space="preserve">
    <value>No work created to date</value>
  </data>
  <data name="CreateWorkChoosen" xml:space="preserve">
    <value>You chose to create a work</value>
  </data>
  <data name="ExecuteWorkChossen" xml:space="preserve">
    <value>You chose to execute a work</value>
  </data>
  <data name="ExecuteWorksChosen" xml:space="preserve">
    <value>You chose to execute all works.</value>
  </data>
  <data name="ModifiyingWork" xml:space="preserve">
    <value>Modifiying work</value>
  </data>
  <data name="TypeNewName" xml:space="preserve">
    <value>Type a new name</value>
  </data>
  <data name="TypeNewSource" xml:space="preserve">
    <value>Type a new source folder</value>
  </data>
  <data name="TypeNewTarget" xml:space="preserve">
    <value>Type a new target folder</value>
  </data>
  <data name="TypeNewSaveType" xml:space="preserve">
    <value>Type a new save type (1. Complete, 2. Differential)</value>
  </data>
  <data name="EmptyForSame" xml:space="preserve">
    <value>(Leave empty to keep the same)</value>
  </data>
  <data name="ExecutingWork" xml:space="preserve">
    <value>Running</value>
  </data>
  <data name="ExecutingSuccess" xml:space="preserve">
    <value>Executed successfully</value>
  </data>
  <data name="ExecuteEnded" xml:space="preserve">
    <value>End of work transfer</value>
  </data>
  <data name="ModificationSuccess" xml:space="preserve">
    <value>Work modified successfully</value>
  </data>
  <data name="DeleteSuccess" xml:space="preserve">
    <value>Work deleted successfully</value>
  </data>
  <data name="success" xml:space="preserve">
    <value>success</value>
  </data>
  <data name="failed" xml:space="preserve">
    <value>failed</value>
  </data>
  <data name="and" xml:space="preserve">
    <value>et</value>
  </data>
  <data name="InvalidType" xml:space="preserve">
    <value>Invalid type, please modify your work then try again</value>
  </data>
  <data name="ToContinue" xml:space="preserve">
    <value>Press any key to continue</value>
  </data>
  <data name="TooMuchWorks" xml:space="preserve">
    <value>Works created limit has been reached</value>
  </data>
  <data name="LanguageChanged" xml:space="preserve">
    <value>Language changed</value>
  </data>
  <data name="SourceNotExists" xml:space="preserve">
    <value>Source folder does not exist</value>
  </data>
  <data name="DeleteWorkChosen" xml:space="preserve">
    <value>You chose to delete a work</value>
  </data>
  <data name="Exit" xml:space="preserve">
    <value>Exit</value>
  </data>
  <data name="French" xml:space="preserve">
    <value>French</value>
  </data>
  <data name="Home" xml:space="preserve">
    <value>Home</value>
  </data>
  <data name="Create a backup" xml:space="preserve">
    <value>Create a backup</value>
  </data>
  <data name="Execute a backup" xml:space="preserve">
    <value>Execute a backup</value>
  </data>
  <data name="Modify a backup" xml:space="preserve">
    <value>Modify a backup</value>
  </data>
  <data name="Français" xml:space="preserve">
    <value>Français</value>
  </data>
  <data name="Englisht" xml:space="preserve">
    <value>English</value>
  </data>
  <data name="Welcome on Easysave" xml:space="preserve">
    <value>Welcome on Easysave</value>
  </data>
  <data name="Get started today" xml:space="preserve">
    <value>Get started today</value>
  </data>
  <data name="Your precedent backup :" xml:space="preserve">
    <value>Your precedent backup :</value>
  </data>
  <data name="Please complete the informations below :" xml:space="preserve">
    <value>Please complete the informations below :</value>
  </data>
  <data name="Enter a name :" xml:space="preserve">
    <value>Enter a name :</value>
  </data>
  <data name="Enter a file source :" xml:space="preserve">
    <value>Enter a file source :</value>
  </data>
  <data name="Enter a file target :" xml:space="preserve">
    <value>Enter a file target :</value>
  </data>
  <data name="Choose a type of save :" xml:space="preserve">
    <value>Choose a type of save :</value>
  </data>
  <data name="Complete" xml:space="preserve">
    <value>Complete</value>
  </data>
  <data name="Differential" xml:space="preserve">
    <value>Differential</value>
  </data>
  <data name="Please choose a backup to execute :" xml:space="preserve">
    <value>Please choose a backup to execute :</value>
  </data>
  <data name="Please choose a backup to modify :" xml:space="preserve">
    <value>Please choose a backup to modify :</value>
  </data>
  <data name="Search" xml:space="preserve">
    <value>Search</value>
  </data>
</root>